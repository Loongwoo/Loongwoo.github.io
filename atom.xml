<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[许龙武的技术博客]]></title>
  <link href="http://loongwoo.github.io/atom.xml" rel="self"/>
  <link href="http://loongwoo.github.io/"/>
  <updated>2015-07-10T11:16:14+08:00</updated>
  <id>http://loongwoo.github.io/</id>
  <author>
    <name><![CDATA[许龙武]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IOS自定义不等高UITableViewCell]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/09/at-ioszi-ding-yi-bu-deng-gao-uitableviewcell/"/>
    <updated>2015-07-09T16:59:08+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/09/at-ioszi-ding-yi-bu-deng-gao-uitableviewcell</id>
    <content type="html"><![CDATA[<p>在APP中常有类似用户手册问题解答的需求，常常是一问一答的形式。这时候可能问题和答案的长度都不一样，如果用等高的Cell来显示会很难看。这时候就需要不等高的Cell，也就是希望Cell能够自适应高度。这里采用基本的MVC架构。</p>

<h2>Model</h2>

<h3>数据存储</h3>

<p>由于考虑到多平台的通用性，选择json保存数据，这里用的Pod管理的MJExtension库,方便把json转化为Model，先创建一个questions.json的文件。：</p>

<pre><code>[
  {
    "ID": 1,
    "question": "我的******为什么不可以用？",
    "answer": "1. 确保打开手机麦克风权限，IOS手机请前往‘设置-通用-隐私-麦克风’，找到******并打开；\n2. 确保手机遥控器充满电；\n3. 插入是确保能看到‘******’的信息。"
  }
]
</code></pre>

<p>内容是一个数组，每一项有3个数据:ID、question和answer。</p>

<h3>ManualModel</h3>

<pre><code>@interface ManualModel : NSObject

@property (nonatomic, assign) NSInteger ID;
@property (nonatomic, copy) NSString *question;
@property (nonatomic, copy) NSString *answer;

@end
</code></pre>

<p>ManualModel中的三项和json的一一对应，不对应的话也可以，就是要在转化的时候手动指定就可以了，具体请看<a href="https://github.com/CoderMJLee/MJExtension">MJExtension</a>的讲解。关于生成json对应的Model，有人做了一个Xcode插件<a href="https://github.com/EnjoySR/ESJsonFormat-Xcode">ESJsonFormat-Xcode</a>，图形化快速生成所有的属性，还避免了手动敲代码导致的可能某个属性名差一个字母这些低级错误，用起来还是很方便的。</p>

<h2>View</h2>

<h3>.h文件</h3>

<pre><code>@class ManualModel;
@interface UnequalHeightCell : UITableViewCell

@property (nonatomic, strong)ManualModel *manual;

+(CGFloat)cellHeight:(ManualModel*)model;
@end
</code></pre>

<p>创建UnequalHeightCell，添加属性manual，以及类的方法cellHeight用来计算cell 的高度。</p>

<h3>.m文件</h3>

<pre><code>@implementation UnequalHeightCell{
    UIView *questionView, *answerView;
    UILabel *questionLabel,*answerLabel;
}

-(instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    if (self) {
        questionView=[[UIView alloc]initWithFrame:CGRectZero];
        questionView.backgroundColor=[UIColor colorWithRed:0 green:0.75 blue:1 alpha:1];
        [self addSubview:questionView];

        questionLabel=[self labelWithFont:QFont textColor:[UIColor whiteColor]];
        [questionView addSubview:questionLabel];

        answerView=[[UIView alloc]initWithFrame:CGRectZero];
        answerView.backgroundColor=[UIColor whiteColor];
        [self addSubview:answerView];

        answerLabel=[self labelWithFont:AFont textColor:[UIColor blackColor]];
        [answerView addSubview:answerLabel];
    }
    return self;
}

-(UILabel*)labelWithFont:(UIFont*)font textColor:(UIColor*)textColor{
    UILabel *label=[[UILabel alloc]initWithFrame:CGRectZero];
    label.backgroundColor=[UIColor clearColor];
    label.textColor=textColor;
    label.font=font;
    label.numberOfLines=0;
    label.textAlignment=NSTextAlignmentLeft;
    return label;
}
</code></pre>

<p>实现初始化函数initWithStyle，放两个label分别显示问题和答案，考虑的上下左右的边缘，加个UIView放置label。frame可以放到layoutSubviews中统一处理。关于上下左右留出边缘的方法还有一种，就是自定义一个UILabel重写以下方法：</p>

<pre><code>@property(nonatomic) UIEdgeInsets insets;

-(void)drawTextInRect:(CGRect)rect {
    return [super drawTextInRect:UIEdgeInsetsInsetRect(rect, self.insets)];
}
</code></pre>

<p>这样子要注意的是：根据内容计算出高度之后，就要自己加上上下所留的才是整个Label的高度。在本例中还是用笨一点的方法算了。</p>

<h3>实现manual的set函数</h3>

<pre><code>-(void)setManual:(ManualModel *)manual{
    _manual=manual;

    questionLabel.text=[NSString stringWithFormat:@"Q%d: %@",(int)manual.ID,manual.question];
    answerLabel.text=manual.answer;

    [self setNeedsLayout];
}

-(void)layoutSubviews{
    [super layoutSubviews];

    //设置问题的frame
    CGFloat height=[UnequalHeightCell height:_manual.question font:QFont];
    questionView.frame=CGRectMake(0, 0, ScreenWidth, height);
    questionLabel.frame=CGRectInset(questionView.bounds, LeftRightMargin, TopBottomMargin);

    //设置答案的frame
    height=[UnequalHeightCell height:_manual.answer font:AFont];
    answerView.frame=CGRectMake(0, questionView.frame.size.height, ScreenWidth, height);
    answerLabel.frame=CGRectInset(answerView.bounds, LeftRightMargin, TopBottomMargin);
}
</code></pre>

<p>在调用<code>[self setNeedsLayout];</code>的时候会执行layoutSubviews，设置所有控件的frame。</p>

<pre><code>//根据字体计算问题和答案View需要的高度
+(CGFloat)height:(NSString*)text font:(UIFont*)font{
    CGSize size=[text sizeWithFont:font constrainedToSize:CGSizeMake(ScreenWidth-2*LeftRightMargin, 2000) lineBreakMode:NSLineBreakByWordWrapping];
    return MAX(MinHeight, ceilf(size.height)+2*TopBottomMargin);
}

//Cell的总高度
+(CGFloat)cellHeight:(ManualModel*)model{
    return [self height:model.question font:QFont] + [self height:model.answer font:AFont];
}
</code></pre>

<p>其中sizeWithFont是<a href="http://www.xulongwu.com/blog/2015/07/08/at-ios-nsstringchang-yong-category/">IOS NSString常用Category</a>用了的。cellHeight是构造不等高的cell所必须的。他是questionView和answerView的两个高度和。如果控件更多，计算就复杂一点，意思是一样的。</p>

<h2>Controller</h2>

<p>ViewController继承于UITableViewController，先获取数据源</p>

<pre><code>@property (nonatomic, strong)NSArray *questionAndAnswerArr;

-(NSArray *)questionAndAnswerArr{
    if(_questionAndAnswerArr==nil){
        NSString *path=[[NSBundle mainBundle] pathForResource:@"questions" ofType:@"json"];
        NSData *data=[NSData dataWithContentsOfFile:path];
        NSArray *tmp=[data JSONObject];
        _questionAndAnswerArr=[ManualModel objectArrayWithKeyValuesArray:tmp];
    }
    return _questionAndAnswerArr;
}
</code></pre>

<p>objectArrayWithKeyValuesArray是MJExtension中的方法，可以把字典的数组转化为Model的数组。然后在实现UITableViewDataSource的三个方法</p>

<pre><code>#pragma UITableViewDelegate &amp; UITableViewDataSource
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.questionAndAnswerArr.count;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    ManualModel *model=self.questionAndAnswerArr[indexPath.row];
    return [UnequalHeightCell cellHeight:model];
}

-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    static NSString *identity=@"mycell";
    UnequalHeightCell *cell=[tableView dequeueReusableCellWithIdentifier:identity];
    if (cell==nil) {
        cell=[[UnequalHeightCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identity];
        cell.selectionStyle=UITableViewCellSelectionStyleNone;
    }
    cell.manual=self.questionAndAnswerArr[indexPath.row];
    return cell;
}
#pragma UITableViewDelegate &amp; UITableViewDataSource
</code></pre>

<p>注意到heightForRowAtIndexPath中返回的不是一个固定的值了。而是根据数据源算出来的值。这就实现了不等高的Cell。</p>

<h2>效果展示</h2>

<p><img src="http://loongwoo.github.io/images/unequalcell.png" alt="效果图" /></p>

<h2>源码下载</h2>

<p><a href="https://github.com/Loongwoo/UnequalHeightDemo">UnequalHeightCellDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS消息转发机制]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/09/at-iosxiao-xi-zhuan-fa-ji-zhi/"/>
    <updated>2015-07-09T11:14:13+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/09/at-iosxiao-xi-zhuan-fa-ji-zhi</id>
    <content type="html"><![CDATA[<h3>介绍</h3>

<p>平时基本很少用的的知识点，但是知其所以然还是有好处的。以下的Demo完全参考最下面的链接的文章写的，理解起来不难。</p>

<h3>源码下载</h3>

<p><a href="https://github.com/Loongwoo/MsgForwardDemo">MsgForwardDemo</a></p>

<h3>参考链接</h3>

<p><a href="http://www.jianshu.com/p/1bde36ad9938">http://www.jianshu.com/p/1bde36ad9938</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS NSString常用Category]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/08/at-ios-nsstringchang-yong-category/"/>
    <updated>2015-07-08T17:34:44+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/08/at-ios-nsstringchang-yong-category</id>
    <content type="html"><![CDATA[<p>我们经常会在项目中用一些NSString的Category，可以记录下来，免得每次都要查。比如NSString的URL编码、MD5加密、自适应大小等等。</p>

<h2>方法解析</h2>

<h3>汉字转拼音</h3>

<pre><code>-(NSString *)transformToPinyin {
    NSMutableString *mutableString = [NSMutableString stringWithString:self];
    CFStringTransform((CFMutableStringRef)mutableString, NULL, kCFStringTransformToLatin, false);
    mutableString = (NSMutableString *)[mutableString stringByFoldingWithOptions:NSDiacriticInsensitiveSearch locale:[NSLocale currentLocale]];
    return mutableString;
}
</code></pre>

<p>尽管对汉字的排序可以用<code>- (NSComparisonResult)localizedCompare:(NSString *)string;</code>进行排序，但也有时候需要手动排序，这个拓展就有用了。</p>

<h3>URL编码</h3>

<pre><code>-(NSString *)URLEncodedString{
    NSString *encodedString = (NSString *)CFBridgingRelease(CFURLCreateStringByAddingPercentEscapes(kCFAllocatorDefault,
        (CFStringRef)self,
        (CFStringRef)@"!$&amp;'()*+,-./:;=?@_~%#[]",
        NULL,
        kCFStringEncodingUTF8));
    return encodedString;
}
</code></pre>

<p>对于包含中文的URL不能整体转化为UTF-8的格式，那么就可以用<code>CFURLCreateStringByAddingPercentEscapes</code>来排除掉一些应该保留的字符。</p>

<h3>Json字符串转化为Object</h3>

<pre><code>-(id)JSONObject{
    return [NSJSONSerialization JSONObjectWithData:[self dataUsingEncoding:NSUTF8StringEncoding] options:kNilOptions error:nil];
}
</code></pre>

<p>网络接口很多是Json的字符串，该方法直接转化为NSArray、NSDictionary等。</p>

<h3>MD5加密</h3>

<pre><code>-(NSString*)md5{
    const char *cStr = [self UTF8String];
    unsigned char result[CC_MD5_DIGEST_LENGTH];
    CC_MD5( cStr, (int)strlen(cStr), result );
    return [NSString stringWithFormat: @"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", 
        result[0], result[1], result[2], result[3], result[4], result[5], result[6], result[7], result[8], 
        result[9], result[10], result[11], result[12], result[13], result[14], result[15]];
}
</code></pre>

<p>MD5加密也是常用的方法，记得导入<code>#import &lt;CommonCrypto/CommonDigest.h&gt;</code>。</p>

<h3>UTF16的MD5加密</h3>

<pre><code>-(NSString *)md5ForUTF16{
    NSData *temp = [self dataUsingEncoding:NSUTF16LittleEndianStringEncoding];
    UInt8 *cStr = (UInt8 *)[temp bytes];
    unsigned char result[CC_MD5_DIGEST_LENGTH];
    CC_MD5(cStr, (int)[temp length], result);
    return [NSString stringWithFormat:@"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x",  
        result[0], result[1], result[2], result[3], result[4], result[5], result[6], result[7], result[8], 
    result[9], result[10], result[11], result[12], result[13], result[14], result[15]];
}
</code></pre>

<p>这个加密倒不是很常用，经常有前面一个就够用了，这里统一记录一下。</p>

<h3>去掉前后的空格</h3>

<pre><code>-(NSString *)trim {
    return [self stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
}
</code></pre>

<p>记得在写C#的时候，经常要带着trim函数走。但是IOS里面用的地方不多，记得用过的就是URL的参数，以及在要把输入内容转化为数字的时候。在输入结束的时候trim一下是个应该坚持的习惯。</p>

<h3>去掉行中多余空格</h3>

<pre><code>-(NSString *)trimTheExtraSpaces{
    NSCharacterSet *whitespaces = [NSCharacterSet whitespaceCharacterSet];
    NSPredicate *noEmptyStrings = [NSPredicate predicateWithFormat:@"SELF != ''"];
    NSArray *parts = [self componentsSeparatedByCharactersInSet:whitespaces];
    NSArray *filteredArray = [parts filteredArrayUsingPredicate:noEmptyStrings];
    return [filteredArray componentsJoinedByString:@" "];
}
</code></pre>

<p>该方法会去掉string中的多余空格，有多个的话留一个。</p>

<h3>是否是空字符</h3>

<pre><code>-(BOOL)isEmpty {
    NSCharacterSet *charSet = [NSCharacterSet whitespaceAndNewlineCharacterSet];
    NSString *trimmed = [self stringByTrimmingCharactersInSet:charSet];
    return [trimmed isEqualToString:@""];
}
</code></pre>

<p>我们常常用<code>if( nil == tempStr || 0 == tempStr.lenth ){...}</code>来判断是否为空。但比如<code>NSString \*tmp4=@"   ";</code>这样一个字符串，<code>[tmp4 length]</code>求的长度为3。但是用上面的方法可以看到是空的。</p>

<h3>自适应大小</h3>

<pre><code>-(CGSize)sizeWithFont:(UIFont *)font
    constrainedToSize:(CGSize)constrainedSize
        lineBreakMode:(NSLineBreakMode)lineBreakMode {
    if ([self respondsToSelector:@selector(boundingRectWithSize:options:attributes:context:)]) {
        NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
        paragraphStyle.lineBreakMode = lineBreakMode;
        NSDictionary *attributes = @{NSFontAttributeName:font, NSParagraphStyleAttributeName:paragraphStyle};
        CGRect boundingRect = [self boundingRectWithSize:constrainedSize 
            options:NSStringDrawingUsesLineFragmentOrigin 
            attributes:attributes context:nil];
        return CGSizeMake(ceilf(boundingRect.size.width), ceilf(boundingRect.size.height));
    }
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
    return [self sizeWithFont:font constrainedToSize:constrainedSize lineBreakMode:lineBreakMode];
#pragma clang diagnostic pop
}
</code></pre>

<p>这个就再熟悉不过了，不过定义Category的时候要记得导入<code>#import &lt;UIKit/UIKit.h&gt;</code>，否则CGSize这些会报错。还有一个用法</p>

<pre><code>#pragma clang diagnostic push
#pragma clang diagnostic ignored "-相关命令"
// 你自己的代码
#pragma clang diagnostic pop
</code></pre>

<p>#pragma我们常用来做分段注释，还有一个功能是处理编译器警告。<code>-Wdeprecated-declarations</code>表示方法弃用。加了这个之后，就不会再出现黄色警告了。</p>

<h2>源码下载</h2>

<p><a href="https://github.com/Loongwoo/StringExtensionDemo">StringExtensionDemo</a></p>

<p>在项目中导入NSString+Extensions.h和NSString+Extensions.m即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS PDF显示和浏览]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/07/at-ios-pdfxian-shi-he-liu-lan/"/>
    <updated>2015-07-07T11:04:31+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/07/at-ios-pdfxian-shi-he-liu-lan</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>这里介绍两种方法显示PDF，第一种用UIWebView，特点是代码简单，但是没法实现翻页效果。第二中方法利用IOS系统的CGContextDrawPDFPage方法手动实现，代码复杂一些，同时需要配合UIScrollView实现缩放，以及利用UIPageViewController实现翻页的效果。</p>

<h2>方法一：利用UIWebView</h2>

<pre><code>-(void)loadPDF:(NSString*)fileName inWebView:(UIWebView*)webView{
    NSString *path = [[NSBundle mainBundle] pathForResource:fileName ofType:nil];
    NSURL *url = [NSURL fileURLWithPath:path];
    NSURLRequest *request = [NSURLRequest requestWithURL:url];
    [webView loadRequest:request];
}
</code></pre>

<ul>
<li>技巧：设置<code>webView.scalesPageToFit = YES;</code>可以实现pinch放大缩小</li>
<li>缺点：没有翻页的动画效果</li>
</ul>


<h2>方法二：利用CGContextDrawPDFPage</h2>

<h3>CGContextDrawPDFPage</h3>

<pre><code>-(void)drawInContext:(CGContextRef)context atPageNo:(int)page_no{
    // PDF page drawing expects a Lower-Left coordinate system, so we flip the coordinate system
    // before we start drawing.
    CGContextTranslateCTM(context, 0.0, self.bounds.size.height);
    CGContextScaleCTM(context, 1.0, -1.0);

    if (pageNO == 0) {
        pageNO = 1;
    }    
    CGPDFPageRef page = CGPDFDocumentGetPage(pdfDocument, pageNO);
    CGContextSaveGState(context);
    {
        CGAffineTransform pdfTransform = CGPDFPageGetDrawingTransform(page, kCGPDFCropBox, self.bounds, 0, true);
        CGContextConcatCTM(context, pdfTransform);
        CGContextDrawPDFPage(context, page);
    }
    CGContextRestoreGState(context);
}
</code></pre>

<p>需要先反转坐标，根据pageNO获取到CGPDFDocumentRef的那一页，直接CGContextDrawPDFPage。</p>

<h3>UIScrollView</h3>

<p>配合UIScrollView实现缩放，ZPDFPageController的主要代码：</p>

<pre><code>-(void)viewDidLoad{
    [super viewDidLoad];
    UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:self.view.bounds];
    scrollView.showsVerticalScrollIndicator=NO;
    scrollView.showsHorizontalScrollIndicator=NO;
    scrollView.minimumZoomScale=1.0f;
    scrollView.maximumZoomScale=3.0f;
    scrollView.delegate=self;
    [self.view addSubview:scrollView];

    pdfView = [[ZPDFView alloc] initWithFrame:scrollView.bounds atPage:(int)self.pageNO withPDFDoc:self.pdfDocument];
    pdfView.backgroundColor=[UIColor whiteColor];
    [scrollView addSubview:pdfView];

    scrollView.contentSize=pdfView.bounds.size;
}

- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView{
    return pdfView;
}
</code></pre>

<h3>UIPageViewController</h3>

<p>UIPageViewController的TransitionStyle设置为UIPageViewControllerTransitionStylePageCurl（翻页）。其次也是构建UIPageViewControllerDataSource中的两个方法（ZPDFPageModel）。要注意他们返回的是UIViewController，具体实现请参考源码。</p>

<h2>效果展示</h2>

<p><img src="http://loongwoo.github.io/images/pdf1.png" alt="PDF1" /> <img src="http://loongwoo.github.io/images/pdf2.png" alt="PDF2" /></p>

<h2>源码下载</h2>

<p><a href="https://github.com/Loongwoo/PDFDemo">PDFDemo</a></p>

<h2>参考链接</h2>

<p><a href="http://blog.csdn.net/yiyaaixuexi/article/details/7645725">http://blog.csdn.net/yiyaaixuexi/article/details/7645725</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS App启动引导界面]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/07/at-ios-appqi-dong-yin-dao-jie-mian/"/>
    <updated>2015-07-07T01:49:19+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/07/at-ios-appqi-dong-yin-dao-jie-mian</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>由于之前一直都是用纯代码构建页面，一直没有学习怎么用storyboard。已经深深的感受到了纯代码写页面的繁琐了。所以这个Demo不但学习怎么用PageViewController实现启动引导的图片展示，也初步学习了怎么用storyboard构建页面。</p>

<h2>构建storyboard</h2>

<p>先创建一个Single View Application，构建Main.storyboard，预览如下
<img src="http://loongwoo.github.io/images/storyboard.png" alt="预览" />
除了最左的View Controller（根VC），新增了两个分别是右上Page View Controller和右下View Controller（内容VC）。</p>

<ol>
<li>确保勾选Use Auto Layout和Use Size Classes</li>
<li>关于Size Classes的讲解请参考<a href="http://www.cocoachina.com/ios/20141217/10669.html">链接1</a>，此处为了适配所有的设备，故选择了默认的w Any h Any</li>
<li>为内容VC添加一个Label和UIImageView，分别设置Constraints<br/>
鼠标右键点击Label拖动，在提示框选择Top Space to Top Layout Guide（IOS7中会自动向下移动20个像素）和Center Horizontally In Container（水平居中）。点击右边Edit可以设置具体的值。
<img src="http://loongwoo.github.io/images/labelSC.png" alt="设置Label的约束" />
如下设置上下左右约束，Trailing Space to: superview（右）为-16；Leading Space to: superview（左）为-16；Top Space to: Label（上）为10，Button Space to: Bottom Layout Guide（下）为0；
<img src="http://loongwoo.github.io/images/imageviewSC.png" alt="设置imageView的界限" /></li>
<li>为根VC添加一个Button，也设置好Constraints</li>
</ol>


<h2>代码实现</h2>

<h3>创建PageContentViewController</h3>

<p>连接内容VC和PageContentViewController.h，再连接好titleLabel和backgroundImageView，最后申明如下三个属性：</p>

<pre><code>@property (weak, nonatomic) IBOutlet UILabel *titleLabel;
@property (weak, nonatomic) IBOutlet UIImageView *backgroundImageView;

@property(assign, nonatomic) NSUInteger pageIndex;
@property(copy, nonatomic) NSString *titleText;
@property(copy, nonatomic) NSString *imageFile;
</code></pre>

<p>PageContentViewController.m, 在viewDidLoad中添加</p>

<pre><code>self.titleLabel.text=self.titleText;
self.backgroundImageView.image=[UIImage imageNamed:self.imageFile];
</code></pre>

<h3>ViewController</h3>

<p>ViewController.h中申请UIPageViewControllerDataSource，连接startBtn</p>

<pre><code>@interface ViewController : UIViewController&lt;UIPageViewControllerDataSource&gt;

-(IBAction)startWalkthrough:(id)sender;

@property (strong, nonatomic) UIPageViewController *pageViewController;
@property (strong, nonatomic) NSArray *pageTitles;
@property (strong, nonatomic) NSArray *pageImages;
@end
</code></pre>

<p>ViewController.m, 实现UIPageViewControllerDateSource的四个方法</p>

<pre><code>#pragma mark - Page View Controller Data Source

-(UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerBeforeViewController:(UIViewController *)viewController{
    NSUInteger index = ((PageContentViewController*) viewController).pageIndex;
    if ((index == 0) || (index == NSNotFound)) {
        return nil;
    }
    index--;
    return [self viewControllerAtIndex:index];
}

-(UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerAfterViewController:(UIViewController *)viewController{
    NSUInteger index = ((PageContentViewController*) viewController).pageIndex;         
    if (index == NSNotFound) {
        return nil;
    }               
    index++;
    if (index == [self.pageTitles count]) {
        return nil;
    }
    return [self viewControllerAtIndex:index];
}

-(NSInteger)presentationCountForPageViewController:(UIPageViewController *)pageViewController{
    return [self.pageTitles count];
}

-(NSInteger)presentationIndexForPageViewController:(UIPageViewController *)pageViewController{
    return 0;
}
</code></pre>

<p>前面两个方法告诉PageViewController前一页或者后一页的显示内容；后两个方法告诉页面指示器（Page Indicator）的总页数和初始位置，当然只有在UIPageViewController的TransitionStyle为UIPageViewControllerTransitionStyleScroll的时候才有效。</p>

<pre><code>-(PageContentViewController *)viewControllerAtIndex:(NSUInteger)index{
    if (([self.pageTitles count] == 0) || (index &gt;= [self.pageTitles count])) {
        return nil;
    }
    // Create a new view controller and pass suitable data.
    PageContentViewController *pageContentViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"PageContentViewController"];
    pageContentViewController.imageFile = self.pageImages[index];
    pageContentViewController.titleText = self.pageTitles[index];
    pageContentViewController.pageIndex = index;
    return pageContentViewController;
}
</code></pre>

<p>该方法根据位置信息返回内容页面。</p>

<p>最后实现ViewDidLoad</p>

<pre><code>-(void)viewDidLoad{
    [super viewDidLoad];
    _pageTitles = @[ @"帆船", @"美女", @"豪车",  @"碧海蓝天"];
    _pageImages = @[@"page1.jpg", @"page2.jpg", @"page3.jpg", @"page4.jpg"];

    // Create page view controller
    self.pageViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"PageViewController"];
    self.pageViewController.dataSource = self;

    PageContentViewController *startingViewController = [self viewControllerAtIndex:0];
    NSArray *viewControllers = @[startingViewController];
    [self.pageViewController setViewControllers:viewControllers direction:UIPageViewControllerNavigationDirectionForward animated:NO completion:nil];

    // Change the size of page view controller
    self.pageViewController.view.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height-30);

    [self addChildViewController:_pageViewController];
    [self.view addSubview:_pageViewController.view];
    [self.pageViewController didMoveToParentViewController:self];
}
</code></pre>

<h2>效果展示</h2>

<p><img src="http://loongwoo.github.io/images/xiaoguo1.png" alt="效果图1" /> <img src="http://loongwoo.github.io/images/xiaoguo2.png" alt="效果图2" /></p>

<h2>项目源码</h2>

<p><a href="https://github.com/Loongwoo/PageViewDemo">PageViewDemo代码下载</a></p>

<h2>参考链接</h2>

<ol>
<li><a href="http://www.cocoachina.com/ios/20141217/10669.html">http://www.cocoachina.com/ios/20141217/10669.html</a></li>
<li><a href="http://www.kyleduo.com/?p=278">http://www.kyleduo.com/?p=278</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS中Property的修饰字]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/06/at-ioszhong-propertyde-xiu-shi-zi/"/>
    <updated>2015-07-06T09:42:07+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/06/at-ioszhong-propertyde-xiu-shi-zi</id>
    <content type="html"><![CDATA[<h2>assign、copy 、retain（MRC）</h2>

<ul>
<li>assign: 对基础数据类型 （NSInteger）和C数据类型（int, float, double, char,等）</li>
<li>copy：对NSString（不用同一块内存）</li>
<li>retain：对其他NSObject和其子类（用同一块内存）

<h2>readonly、readwrite</h2></li>
<li>readonly：只读</li>
<li><p>readwrite：读写（默认属性）</p>

<h2>weak、strong（ARC下避免循环引用需要申明weak指针）</h2>

<p><a href="http://www.2cto.com/kf/201409/332193.html">三种容易引起循环引用的场景</a></p></li>
<li><p>weak：指针指向的地址一旦被释放，这些指针都将被赋值为nil。这样的好处能有效的防止野指针。</p></li>
<li>strong：strong就相当于retain属性，而weak相当于assign<br />
<strong>具体一点：IBOutlet可以为weak，NSString为copy，delegate一般为weak，其他的看情况。一般来说，类“内部”的属性设置为strong，类“外部”的属性设置为weak。说到底就是一个归属权的问题。小心出现循环引用导致内存无法释放。</strong>

<h2>nonatomic、atomic</h2></li>
<li>nonatomic：不加同步，多线程并发访问会提高性能。</li>
<li>atomic：默认值<br />
了解<a href="http://www.parallellabs.com/2011/04/09/pthread-mutex-lock-and-thread-safety/">原子操作</a>，以及<a href="http://blog.csdn.net/cubepeng/article/details/7735962">非原子操作的效率提升</a>。</li>
</ul>


<h2>参考链接</h2>

<p>[<a href="http://www.aichengxu.com/view/32930">http://www.aichengxu.com/view/32930</a>]<br />
[<a href="http://www.2cto.com/kf/201205/133943.html">http://www.2cto.com/kf/201205/133943.html</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS属性和成员变量]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/05/at-iosshu-xing-he-cheng-yuan-bian-liang/"/>
    <updated>2015-07-05T21:48:27+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/05/at-iosshu-xing-he-cheng-yuan-bian-liang</id>
    <content type="html"><![CDATA[<p>接手IOS开发开始就是从项目入手，基础很薄弱。成员变量和属性的用法一向比较混乱，难得有空补点课。</p>

<h1>类（Class）中的成员变量和属性</h1>

<h2>相关文档</h2>

<p>英文文档 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html">《The Objective-c Programming Language》</a><br />
中文文档 <a href="http://blog.csdn.net/column/details/object-c.html">Objective-C编程语言官方文档翻译</a></p>

<h2>关于@synthesize object =_object的解释</h2>

<pre><code>@interface MyClass:NSObject{
    MyObjecct *_object;//成员变量
}
@property(nonamtic, retain) MyObjecct *object;//属性property
@end

@implementatin MyClass
@synthesize object=_object;
</code></pre>

<p>synthesize定义了一对getter和setter方法，在这里的getter方法是object，setter方法是setObject，事实上getter和setter方法操作的是变量_object。属性通过点表达式(.)来访问其实是调用了getter和setter方法，其实就是操作了成员变量_object。故在.m文件中可以直接的使用_object实例变量，也可以通过属性self.object是一样的。<strong>简单来说，属性就是定义了getter和setter方法来操作_object成员变量</strong></p>

<h2>现在推荐的做法</h2>

<pre><code>@interface MyClass:NSObject
@property(nonamtic, retain) MyObjecct *object;//属性
@end
</code></pre>

<p>编译器会自动生成_object、getter和setter方法。</p>

<ol>
<li>成员变量为该类变量私有，最好声明在implementation里</li>
<li>public的属性写在.h文件里</li>
<li>如果自己内部需要setter和getter来实现一些东西，就在.m文件的类目里用property来申明</li>
</ol>


<h1>类别（Category）中得属性</h1>

<p>类别（Category）：常常为了拓展类的功能会对类进行拓展。如</p>

<pre><code>@interface UIViewController (UINavigationControllerItem)
    @property(nonatomic,readonly,retain) UINavigationItem *navigationItem;
    @property(nonatomic) BOOL hidesBottomBarWhenPushed;
    @property(nonatomic,readonly,retain) UINavigationController *navigationController;
@end
</code></pre>

<p>这里添加的属性，不会自动生成实例变量，这里添加的属性其实是添加的getter与setter方法。</p>

<h1>后记</h1>

<h2>下节预告</h2>

<p>下一篇可以梳理一下属性的nonatomic、retain、weak、strong的用法，以及类别中添加属性的方法。</p>

<h2>参考链接：</h2>

<p><a href="http://www.cnblogs.com/ygm900/p/3660364.html">http://www.cnblogs.com/ygm900/p/3660364.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前言]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/05/at-qian-yan/"/>
    <updated>2015-07-05T20:13:43+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/05/at-qian-yan</id>
    <content type="html"><![CDATA[<h1>为什么开博客？</h1>

<p>毕业几年了，刚开始做C#的时候写过一些博客，当时做的时间不久，知识点都是一知半解的。然后又做了两年Android手机，用了Jave和C语言。去年才开始做IOS开发，做智能家居的创业公司，边学边开发，也没时间总结，前后做了3个APP，往往是刚做完就又开始下一个，其实都不忍心看刚刚才开发完成的这一个。</p>

<p>这一年里每每不懂了就来网上扒，也没个总结，只怕到时候还是什么都还回去了。今天弄了一个技术博客，希望自己能够坚持充电，也不断总结自己的知识点。</p>

<h1>这个技术博客怎么弄的？</h1>

<p>这个主要是参考了<a href="http://blog.leichunfeng.com">雷纯锋</a>和<a href="http://blog.devtang.com">唐巧</a>的几篇文章搞出来的，功能还很简单，有空了再完善一下。话说弄一个自己专属的博客可以让自己享受下DIY的乐趣，增加一些发博的动力，想起来也蛮好玩的。</p>
]]></content>
  </entry>
  
</feed>
