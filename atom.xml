<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[许龙武的技术博客]]></title>
  <link href="http://loongwoo.github.io/atom.xml" rel="self"/>
  <link href="http://loongwoo.github.io/"/>
  <updated>2015-07-07T15:05:27+08:00</updated>
  <id>http://loongwoo.github.io/</id>
  <author>
    <name><![CDATA[许龙武]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IOS PDF显示和浏览]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/07/at-ios-pdfxian-shi-he-liu-lan/"/>
    <updated>2015-07-07T11:04:31+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/07/at-ios-pdfxian-shi-he-liu-lan</id>
    <content type="html"><![CDATA[<h2>利用webView</h2>

<pre><code>-(void)loadPDF:(NSString*)fileName inWebView:(UIWebView*)webView{
    NSString *path = [[NSBundle mainBundle] pathForResource:fileName ofType:nil];
    NSURL *url = [NSURL fileURLWithPath:path];
    NSURLRequest *request = [NSURLRequest requestWithURL:url];
    [webView loadRequest:request];
}
</code></pre>

<ul>
<li>技巧：设置<code>webView.scalesPageToFit = YES;</code>可以实现pinch放大缩小</li>
<li>缺点：没有翻页的动画效果</li>
</ul>


<h2>利用CGContextDrawPDFPage</h2>

<h3>CGContextDrawPDFPage</h3>

<pre><code>-(void)drawInContext:(CGContextRef)context atPageNo:(int)page_no{
    // PDF page drawing expects a Lower-Left coordinate system, so we flip the coordinate system
    // before we start drawing.
    CGContextTranslateCTM(context, 0.0, self.bounds.size.height);
    CGContextScaleCTM(context, 1.0, -1.0);

    if (pageNO == 0) {
        pageNO = 1;
    }    
    CGPDFPageRef page = CGPDFDocumentGetPage(pdfDocument, pageNO);
    CGContextSaveGState(context);
    {
        CGAffineTransform pdfTransform = CGPDFPageGetDrawingTransform(page, kCGPDFCropBox, self.bounds, 0, true);
        CGContextConcatCTM(context, pdfTransform);
        CGContextDrawPDFPage(context, page);
    }
    CGContextRestoreGState(context);
}
</code></pre>

<p>需要先反转坐标，根据pageNO获取到CGPDFDocumentRef的那一页，直接CGContextDrawPDFPage。</p>

<h3>UIScrollView</h3>

<p>配合UIScrollView实现缩放，ZPDFPageController的主要代码：</p>

<pre><code>-(void)viewDidLoad{
    [super viewDidLoad];
    UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:self.view.bounds];
    scrollView.showsVerticalScrollIndicator=NO;
    scrollView.showsHorizontalScrollIndicator=NO;
    scrollView.minimumZoomScale=1.0f;
    scrollView.maximumZoomScale=3.0f;
    scrollView.delegate=self;
    [self.view addSubview:scrollView];

    pdfView = [[ZPDFView alloc] initWithFrame:scrollView.bounds atPage:(int)self.pageNO withPDFDoc:self.pdfDocument];
    pdfView.backgroundColor=[UIColor whiteColor];
    [scrollView addSubview:pdfView];

    scrollView.contentSize=pdfView.bounds.size;
}

- (UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView{
    return pdfView;
}
</code></pre>

<h3>UIPageViewController</h3>

<p>UIPageViewController的TransitionStyle设置为UIPageViewControllerTransitionStylePageCurl（翻页）。其次也是构建UIPageViewControllerDataSource中的两个方法（ZPDFPageModel）。要注意他们返回的是UIViewController，具体实现请参考源码。</p>

<h2>效果展示</h2>

<p><img src="http://loongwoo.github.io/images/pdf1.png" alt="PDF1" /> <img src="http://loongwoo.github.io/images/pdf2.png" alt="PDF2" /></p>

<h2>源码下载</h2>

<p><a href="https://github.com/Loongwoo/PDFDemo">PDFDemo</a></p>

<h2>参考链接</h2>

<p><a href="http://blog.csdn.net/yiyaaixuexi/article/details/7645725">http://blog.csdn.net/yiyaaixuexi/article/details/7645725</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS App启动引导界面]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/07/at-ios-appqi-dong-yin-dao-jie-mian/"/>
    <updated>2015-07-07T01:49:19+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/07/at-ios-appqi-dong-yin-dao-jie-mian</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>由于之前一直都是用纯代码构建页面，一直没有学习怎么用storyboard。已经深深的感受到了纯代码写页面的繁琐了。所以这个Demo不但学习怎么用PageViewController实现启动引导的图片展示，也初步学习了怎么用storyboard构建页面。</p>

<h2>构建storyboard</h2>

<p>先创建一个Single View Application，构建Main.storyboard，预览如下
<img src="http://loongwoo.github.io/images/storyboard.png" alt="预览" />
除了最左的View Controller（根VC），新增了两个分别是右上Page View Controller和右下View Controller（内容VC）。</p>

<ol>
<li>确保勾选Use Auto Layout和Use Size Classes</li>
<li>关于Size Classes的讲解请参考<a href="http://www.cocoachina.com/ios/20141217/10669.html">链接1</a>，此处为了适配所有的设备，故选择了默认的w Any h Any</li>
<li>为内容VC添加一个Label和UIImageView，分别设置Constraints<br/>
鼠标右键点击Label拖动，在提示框选择Top Space to Top Layout Guide（IOS7中会自动向下移动20个像素）和Center Horizontally In Container（水平居中）。点击右边Edit可以设置具体的值。
<img src="http://loongwoo.github.io/images/labelSC.png" alt="设置Label的约束" />
如下设置上下左右约束，Trailing Space to: superview（右）为-16；Leading Space to: superview（左）为-16；Top Space to: Label（上）为10，Button Space to: Bottom Layout Guide（下）为0；
<img src="http://loongwoo.github.io/images/imageviewSC.png" alt="设置imageView的界限" /></li>
<li>为根VC添加一个Button，也设置好Constraints</li>
</ol>


<h2>代码实现</h2>

<h3>创建PageContentViewController</h3>

<p>连接内容VC和PageContentViewController.h，再连接好titleLabel和backgroundImageView，最后申明如下三个属性：</p>

<pre><code>@property (weak, nonatomic) IBOutlet UILabel *titleLabel;
@property (weak, nonatomic) IBOutlet UIImageView *backgroundImageView;

@property(assign, nonatomic) NSUInteger pageIndex;
@property(copy, nonatomic) NSString *titleText;
@property(copy, nonatomic) NSString *imageFile;
</code></pre>

<p>PageContentViewController.m, 在viewDidLoad中添加</p>

<pre><code>self.titleLabel.text=self.titleText;
self.backgroundImageView.image=[UIImage imageNamed:self.imageFile];
</code></pre>

<h3>ViewController</h3>

<p>ViewController.h中申请UIPageViewControllerDataSource，连接startBtn</p>

<pre><code>@interface ViewController : UIViewController&lt;UIPageViewControllerDataSource&gt;

-(IBAction)startWalkthrough:(id)sender;

@property (strong, nonatomic) UIPageViewController *pageViewController;
@property (strong, nonatomic) NSArray *pageTitles;
@property (strong, nonatomic) NSArray *pageImages;
@end
</code></pre>

<p>ViewController.m, 实现UIPageViewControllerDateSource的四个方法</p>

<pre><code>#pragma mark - Page View Controller Data Source

-(UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerBeforeViewController:(UIViewController *)viewController{
    NSUInteger index = ((PageContentViewController*) viewController).pageIndex;
    if ((index == 0) || (index == NSNotFound)) {
        return nil;
    }
    index--;
    return [self viewControllerAtIndex:index];
}

-(UIViewController *)pageViewController:(UIPageViewController *)pageViewController viewControllerAfterViewController:(UIViewController *)viewController{
    NSUInteger index = ((PageContentViewController*) viewController).pageIndex;         
    if (index == NSNotFound) {
        return nil;
    }               
    index++;
    if (index == [self.pageTitles count]) {
        return nil;
    }
    return [self viewControllerAtIndex:index];
}

-(NSInteger)presentationCountForPageViewController:(UIPageViewController *)pageViewController{
    return [self.pageTitles count];
}

-(NSInteger)presentationIndexForPageViewController:(UIPageViewController *)pageViewController{
    return 0;
}
</code></pre>

<p>前面两个方法告诉PageViewController前一页或者后一页的显示内容；后两个方法告诉页面指示器（Page Indicator）的总页数和初始位置，当然只有在UIPageViewController的TransitionStyle为UIPageViewControllerTransitionStyleScroll的时候才有效。</p>

<pre><code>-(PageContentViewController *)viewControllerAtIndex:(NSUInteger)index{
    if (([self.pageTitles count] == 0) || (index &gt;= [self.pageTitles count])) {
        return nil;
    }
    // Create a new view controller and pass suitable data.
    PageContentViewController *pageContentViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"PageContentViewController"];
    pageContentViewController.imageFile = self.pageImages[index];
    pageContentViewController.titleText = self.pageTitles[index];
    pageContentViewController.pageIndex = index;
    return pageContentViewController;
}
</code></pre>

<p>该方法根据位置信息返回内容页面。</p>

<p>最后实现ViewDidLoad</p>

<pre><code>-(void)viewDidLoad{
    [super viewDidLoad];
    _pageTitles = @[ @"帆船", @"美女", @"豪车",  @"碧海蓝天"];
    _pageImages = @[@"page1.jpg", @"page2.jpg", @"page3.jpg", @"page4.jpg"];

    // Create page view controller
    self.pageViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"PageViewController"];
    self.pageViewController.dataSource = self;

    PageContentViewController *startingViewController = [self viewControllerAtIndex:0];
    NSArray *viewControllers = @[startingViewController];
    [self.pageViewController setViewControllers:viewControllers direction:UIPageViewControllerNavigationDirectionForward animated:NO completion:nil];

    // Change the size of page view controller
    self.pageViewController.view.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height-30);

    [self addChildViewController:_pageViewController];
    [self.view addSubview:_pageViewController.view];
    [self.pageViewController didMoveToParentViewController:self];
}
</code></pre>

<h2>效果展示</h2>

<p><img src="http://loongwoo.github.io/images/xiaoguo1.png" alt="效果图1" /> <img src="http://loongwoo.github.io/images/xiaoguo2.png" alt="效果图2" /></p>

<h2>项目源码</h2>

<p><a href="https://github.com/Loongwoo/PageViewDemo">PageViewDemo代码下载</a></p>

<h2>参考链接</h2>

<ol>
<li><a href="http://www.cocoachina.com/ios/20141217/10669.html">http://www.cocoachina.com/ios/20141217/10669.html</a></li>
<li><a href="http://www.kyleduo.com/?p=278">http://www.kyleduo.com/?p=278</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS中Property的修饰字]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/06/at-ioszhong-propertyde-xiu-shi-zi/"/>
    <updated>2015-07-06T09:42:07+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/06/at-ioszhong-propertyde-xiu-shi-zi</id>
    <content type="html"><![CDATA[<h2>assign、copy 、retain（MRC）</h2>

<ul>
<li>assign: 对基础数据类型 （NSInteger）和C数据类型（int, float, double, char,等）</li>
<li>copy：对NSString（不用同一块内存）</li>
<li>retain：对其他NSObject和其子类（用同一块内存）

<h2>readonly、readwrite</h2></li>
<li>readonly：只读</li>
<li><p>readwrite：读写（默认属性）</p>

<h2>weak、strong（ARC下避免循环引用需要申明weak指针）</h2>

<p><a href="http://www.2cto.com/kf/201409/332193.html">三种容易引起循环引用的场景</a></p></li>
<li><p>weak：指针指向的地址一旦被释放，这些指针都将被赋值为nil。这样的好处能有效的防止野指针。</p></li>
<li>strong：strong就相当于retain属性，而weak相当于assign<br />
<strong>具体一点：IBOutlet可以为weak，NSString为copy，delegate一般为weak，其他的看情况。一般来说，类“内部”的属性设置为strong，类“外部”的属性设置为weak。说到底就是一个归属权的问题。小心出现循环引用导致内存无法释放。</strong>

<h2>nonatomic、atomic</h2></li>
<li>nonatomic：不加同步，多线程并发访问会提高性能。</li>
<li>atomic：默认值<br />
了解<a href="http://www.parallellabs.com/2011/04/09/pthread-mutex-lock-and-thread-safety/">原子操作</a>，以及<a href="http://blog.csdn.net/cubepeng/article/details/7735962">非原子操作的效率提升</a>。</li>
</ul>


<h2>参考链接</h2>

<p>[<a href="http://www.aichengxu.com/view/32930">http://www.aichengxu.com/view/32930</a>]<br />
[<a href="http://www.2cto.com/kf/201205/133943.html">http://www.2cto.com/kf/201205/133943.html</a>]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS属性和成员变量]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/05/at-iosshu-xing-he-cheng-yuan-bian-liang/"/>
    <updated>2015-07-05T21:48:27+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/05/at-iosshu-xing-he-cheng-yuan-bian-liang</id>
    <content type="html"><![CDATA[<p>接手IOS开发开始就是从项目入手，基础很薄弱。成员变量和属性的用法一向比较混乱，难得有空补点课。</p>

<h1>类（Class）中的成员变量和属性</h1>

<h2>相关文档</h2>

<p>英文文档 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/EncapsulatingData/EncapsulatingData.html">《The Objective-c Programming Language》</a><br />
中文文档 <a href="http://blog.csdn.net/column/details/object-c.html">Objective-C编程语言官方文档翻译</a></p>

<h2>关于@synthesize object =_object的解释</h2>

<pre><code>@interface MyClass:NSObject{
    MyObjecct *_object;//成员变量
}
@property(nonamtic, retain) MyObjecct *object;//属性property
@end

@implementatin MyClass
@synthesize object=_object;
</code></pre>

<p>synthesize定义了一对getter和setter方法，在这里的getter方法是object，setter方法是setObject，事实上getter和setter方法操作的是变量_object。属性通过点表达式(.)来访问其实是调用了getter和setter方法，其实就是操作了成员变量_object。故在.m文件中可以直接的使用_object实例变量，也可以通过属性self.object是一样的。<strong>简单来说，属性就是定义了getter和setter方法来操作_object成员变量</strong></p>

<h2>现在推荐的做法</h2>

<pre><code>@interface MyClass:NSObject
@property(nonamtic, retain) MyObjecct *object;//属性
@end
</code></pre>

<p>编译器会自动生成_object、getter和setter方法。</p>

<ol>
<li>成员变量为该类变量私有，最好声明在implementation里</li>
<li>public的属性写在.h文件里</li>
<li>如果自己内部需要setter和getter来实现一些东西，就在.m文件的类目里用property来申明</li>
</ol>


<h1>类别（Category）中得属性</h1>

<p>类别（Category）：常常为了拓展类的功能会对类进行拓展。如</p>

<pre><code>@interface UIViewController (UINavigationControllerItem)
    @property(nonatomic,readonly,retain) UINavigationItem *navigationItem;
    @property(nonatomic) BOOL hidesBottomBarWhenPushed;
    @property(nonatomic,readonly,retain) UINavigationController *navigationController;
@end
</code></pre>

<p>这里添加的属性，不会自动生成实例变量，这里添加的属性其实是添加的getter与setter方法。</p>

<h1>后记</h1>

<h2>下节预告</h2>

<p>下一篇可以梳理一下属性的nonatomic、retain、weak、strong的用法，以及类别中添加属性的方法。</p>

<h2>参考链接：</h2>

<p><a href="http://www.cnblogs.com/ygm900/p/3660364.html">http://www.cnblogs.com/ygm900/p/3660364.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前言]]></title>
    <link href="http://loongwoo.github.io/blog/2015/07/05/at-qian-yan/"/>
    <updated>2015-07-05T20:13:43+08:00</updated>
    <id>http://loongwoo.github.io/blog/2015/07/05/at-qian-yan</id>
    <content type="html"><![CDATA[<h1>为什么开博客？</h1>

<p>毕业几年了，刚开始做C#的时候写过一些博客，当时做的时间不久，知识点都是一知半解的。然后又做了两年Android手机，用了Jave和C语言。去年才开始做IOS开发，做智能家居的创业公司，边学边开发，也没时间总结，前后做了3个APP，往往是刚做完就又开始下一个，其实都不忍心看刚刚才开发完成的这一个。</p>

<p>这一年里每每不懂了就来网上扒，也没个总结，只怕到时候还是什么都还回去了。今天弄了一个技术博客，希望自己能够坚持充电，也不断总结自己的知识点。</p>

<h1>这个技术博客怎么弄的？</h1>

<p>这个主要是参考了<a href="http://blog.leichunfeng.com">雷纯锋</a>和<a href="http://blog.devtang.com">唐巧</a>的几篇文章搞出来的，功能还很简单，有空了再完善一下。话说弄一个自己专属的博客可以让自己享受下DIY的乐趣，增加一些发博的动力，想起来也蛮好玩的。</p>
]]></content>
  </entry>
  
</feed>
